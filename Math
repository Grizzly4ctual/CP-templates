namespace number_theory {
    int MOD=1e9+7;        //change mod if required!
    int fac[200005];
    int spf[200005];
    int mobius[200005];
    void facs() {
        fac[0]=1;
        for (int i=2;i<200005;i++) {
            fac[i]=fac[i-1]*i;
            fac[i]%=MOD;
        }
    }

    int gcd(int a,int b) {
        if (a==0) {
            return b;
        }
        if (b==0) {
            return a;
        }
        return gcd(b,b%a);
    }

    bool prime[15000105];
    void sieve(int n) {
        for (int i=0;i<=n;i++) {
            prime[i]=1;
        }
        for (int p=2;p*p<=n;p++) {
            if (prime[p]) {
                for (int j=p*p;j<=n;j+=p) {
                    prime[j]=0;
                }
            }
        }
        prime[1]=prime[0]=0;
    }

    vector<int>primes;
    void genprimes(int n) {
        sieve(n+1);
        for (int i=2;i<n+1;i++) {
            if (prime[i]) {
                primes.push_back(i);
            }
        }
    }
    vector<int>phi;
    void totient(int n) {
        phi.resize(n+1);
        for (int i=1;i<n+1;i++) {
            phi[i]=i;
        }
        for (int i=2;i<n+1;i++) {
            if (phi[i]==i) {
                for (int j=2*i;j<n+1;j+=i) {
                    phi[j]=(phi[j]/i)*(i-1);
                }
            }
        }
    }

    int binpowMod(int a,int b) {
        a%=MOD;
        int ans=1;
        while(b>0){
            if(b%2){
                ans=(ans*a)%MOD;
            }
            a=(a*a)%MOD;
            b/=2;
        }
        return ans;
    }

    int modInverse(int n) {
        return binpowMod(n, MOD-2);
    }

    int nCr(int n, int r){
        if (n<r)
            return 0;
        if (r==0 || r==n)
            return 1;
        return (fac[n] * modInverse(fac[r]) % MOD * modInverse(fac[n - r]) % MOD) % MOD;
    }

    void spff() {
        for (int i=2;i<200005;i++) {
            if (spf[i]==0) {
                for (int j=i;j<200005;j+=i) {
                    if (spf[j]==0) {
                        spf[j]=i;
                    }
                }
            }
        }
    }

    void mob() {
        for (int i=1;i<200005;i++) {
            if (i==1) {
                mobius[i]=1;
            } else {
                if (spf[i/spf[i]]==spf[i]) {
                    mobius[i]=0;
                } else {
                    mobius[i]=-1*mobius[i/spf[i]];
                }
            }
        }
    }

}

using namespace number_theory;
